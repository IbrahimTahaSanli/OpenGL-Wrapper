#pragma once
#include <Windows.h>
#include <cstdint>
#include "Window.hpp"

#pragma comment (lib, "opengl32.lib")


namespace GL {
	typedef unsigned int GLuint;
	typedef float GLfloat;
	typedef int GLint;
	typedef void GLvoid;
	typedef enum GLenum;
	typedef std::uint64_t GLsizeiptr;
	typedef std::uint32_t GLbitfield;
	typedef std::uint32_t GLsizei;
	typedef std::int8_t GLchar;
	typedef std::uint8_t GLboolean;

	enum AttribMask {
		GL_CURRENT_BIT = 0x00000001,
		GL_POINT_BIT = 0x00000002,
		GL_LINE_BIT = 0x00000004,
		GL_POLYGON_BIT = 0x00000008,
		GL_POLYGON_STIPPLE_BIT = 0x00000010,
		GL_PIXEL_MODE_BIT = 0x00000020,
		GL_LIGHTING_BIT = 0x00000040,
		GL_FOG_BIT = 0x00000080,
		GL_DEPTH_BUFFER_BIT = 0x00000100,
		GL_ACCUM_BUFFER_BIT = 0x00000200,
		GL_STENCIL_BUFFER_BIT = 0x00000400,
		GL_VIEWPORT_BIT = 0x00000800,
		GL_TRANSFORM_BIT = 0x00001000,
		GL_ENABLE_BIT = 0x00002000,
		GL_COLOR_BUFFER_BIT = 0x00004000,
		GL_HINT_BIT = 0x00008000,
		GL_EVAL_BIT = 0x00010000,
		GL_LIST_BIT = 0x00020000,
		GL_TEXTURE_BIT = 0x00040000,
		GL_SCISSOR_BIT = 0x00080000,
		GL_MULTISAMPLE_BIT = 0x20000000,
		GL_MULTISAMPLE_BIT_ARB = 0x20000000,
		GL_MULTISAMPLE_BIT_EXT = 0x20000000,
		GL_MULTISAMPLE_BIT_3DFX = 0x20000000,
		GL_ALL_ATTRIB_BITS = 0xFFFFFFFF,
	};


	enum BufferStorageMask {
		GL_DYNAMIC_STORAGE_BIT = 0x0100,
		GL_DYNAMIC_STORAGE_BIT_EXT = 0x0100,
		GL_CLIENT_STORAGE_BIT = 0x0200,
		GL_CLIENT_STORAGE_BIT_EXT = 0x0200,
		GL_SPARSE_STORAGE_BIT_ARB = 0x0400,
		GL_LGPU_SEPARATE_STORAGE_BIT_NVX = 0x0800,
		GL_PER_GPU_STORAGE_BIT_NV = 0x0800,
		GL_EXTERNAL_STORAGE_BIT_NVX = 0x2000,
	};


	enum ClearBufferMask {
		GL_COVERAGE_BUFFER_BIT_NV = 0x00008000,
	};


	enum ClientAttribMask {
		GL_CLIENT_PIXEL_STORE_BIT = 0x00000001,
		GL_CLIENT_VERTEX_ARRAY_BIT = 0x00000002,
		GL_CLIENT_ALL_ATTRIB_BITS = 0xFFFFFFFF,
	};


	enum ContextFlagMask {
		GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001,
		GL_CONTEXT_FLAG_DEBUG_BIT = 0x00000002,
		GL_CONTEXT_FLAG_DEBUG_BIT_KHR = 0x00000002,
		GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = 0x00000004,
		GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = 0x00000004,
		GL_CONTEXT_FLAG_NO_ERROR_BIT = 0x00000008,
		GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR = 0x00000008,
		GL_CONTEXT_FLAG_PROTECTED_CONTENT_BIT_EXT = 0x00000010,
	};


	enum ContextProfileMask {
		GL_CONTEXT_CORE_PROFILE_BIT = 0x00000001,
		GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002,
	};


	enum MapBufferAccessMask {
		GL_MAP_READ_BIT = 0x0001,
		GL_MAP_READ_BIT_EXT = 0x0001,
		GL_MAP_WRITE_BIT = 0x0002,
		GL_MAP_WRITE_BIT_EXT = 0x0002,
		GL_MAP_INVALIDATE_RANGE_BIT = 0x0004,
		GL_MAP_INVALIDATE_RANGE_BIT_EXT = 0x0004,
		GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008,
		GL_MAP_INVALIDATE_BUFFER_BIT_EXT = 0x0008,
		GL_MAP_FLUSH_EXPLICIT_BIT = 0x0010,
		GL_MAP_FLUSH_EXPLICIT_BIT_EXT = 0x0010,
		GL_MAP_UNSYNCHRONIZED_BIT = 0x0020,
		GL_MAP_UNSYNCHRONIZED_BIT_EXT = 0x0020,
		GL_MAP_PERSISTENT_BIT = 0x0040,
		GL_MAP_PERSISTENT_BIT_EXT = 0x0040,
		GL_MAP_COHERENT_BIT = 0x0080,
		GL_MAP_COHERENT_BIT_EXT = 0x0080,
	};


	enum MemoryBarrierMask {
		GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001,
		GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT = 0x00000001,
		GL_ELEMENT_ARRAY_BARRIER_BIT = 0x00000002,
		GL_ELEMENT_ARRAY_BARRIER_BIT_EXT = 0x00000002,
		GL_UNIFORM_BARRIER_BIT = 0x00000004,
		GL_UNIFORM_BARRIER_BIT_EXT = 0x00000004,
		GL_TEXTURE_FETCH_BARRIER_BIT = 0x00000008,
		GL_TEXTURE_FETCH_BARRIER_BIT_EXT = 0x00000008,
		GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV = 0x00000010,
		GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020,
		GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT = 0x00000020,
		GL_COMMAND_BARRIER_BIT = 0x00000040,
		GL_COMMAND_BARRIER_BIT_EXT = 0x00000040,
		GL_PIXEL_BUFFER_BARRIER_BIT = 0x00000080,
		GL_PIXEL_BUFFER_BARRIER_BIT_EXT = 0x00000080,
		GL_TEXTURE_UPDATE_BARRIER_BIT = 0x00000100,
		GL_TEXTURE_UPDATE_BARRIER_BIT_EXT = 0x00000100,
		GL_BUFFER_UPDATE_BARRIER_BIT = 0x00000200,
		GL_BUFFER_UPDATE_BARRIER_BIT_EXT = 0x00000200,
		GL_FRAMEBUFFER_BARRIER_BIT = 0x00000400,
		GL_FRAMEBUFFER_BARRIER_BIT_EXT = 0x00000400,
		GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800,
		GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT = 0x00000800,
		GL_ATOMIC_COUNTER_BARRIER_BIT = 0x00001000,
		GL_ATOMIC_COUNTER_BARRIER_BIT_EXT = 0x00001000,
		GL_SHADER_STORAGE_BARRIER_BIT = 0x00002000,
		GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = 0x00004000,
		GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT_EXT = 0x00004000,
		GL_QUERY_BUFFER_BARRIER_BIT = 0x00008000,
		GL_ALL_BARRIER_BITS = 0xFFFFFFFF,
		GL_ALL_BARRIER_BITS_EXT = 0xFFFFFFFF,
	};


	enum OcclusionQueryEventMaskAMD {
		GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD = 0x00000001,
		GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD = 0x00000002,
		GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD = 0x00000004,
		GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD = 0x00000008,
		GL_QUERY_ALL_EVENT_BITS_AMD = 0xFFFFFFFF,
	};


	enum SyncObjectMask {
		GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001,
		GL_SYNC_FLUSH_COMMANDS_BIT_APPLE = 0x00000001,
	};


	enum UseProgramStageMask {
		GL_VERTEX_SHADER_BIT = 0x00000001,
		GL_VERTEX_SHADER_BIT_EXT = 0x00000001,
		GL_FRAGMENT_SHADER_BIT = 0x00000002,
		GL_FRAGMENT_SHADER_BIT_EXT = 0x00000002,
		GL_GEOMETRY_SHADER_BIT = 0x00000004,
		GL_GEOMETRY_SHADER_BIT_EXT = 0x00000004,
		GL_GEOMETRY_SHADER_BIT_OES = 0x00000004,
		GL_TESS_CONTROL_SHADER_BIT = 0x00000008,
		GL_TESS_CONTROL_SHADER_BIT_EXT = 0x00000008,
		GL_TESS_CONTROL_SHADER_BIT_OES = 0x00000008,
		GL_TESS_EVALUATION_SHADER_BIT = 0x00000010,
		GL_TESS_EVALUATION_SHADER_BIT_EXT = 0x00000010,
		GL_TESS_EVALUATION_SHADER_BIT_OES = 0x00000010,
		GL_COMPUTE_SHADER_BIT = 0x00000020,
		GL_MESH_SHADER_BIT_NV = 0x00000040,
		GL_TASK_SHADER_BIT_NV = 0x00000080,
		GL_ALL_SHADER_BITS = 0xFFFFFFFF,
		GL_ALL_SHADER_BITS_EXT = 0xFFFFFFFF,
	};


	enum SubgroupSupportedFeatures {
		GL_SUBGROUP_FEATURE_BASIC_BIT_KHR = 0x00000001,
		GL_SUBGROUP_FEATURE_VOTE_BIT_KHR = 0x00000002,
		GL_SUBGROUP_FEATURE_ARITHMETIC_BIT_KHR = 0x00000004,
		GL_SUBGROUP_FEATURE_BALLOT_BIT_KHR = 0x00000008,
		GL_SUBGROUP_FEATURE_SHUFFLE_BIT_KHR = 0x00000010,
		GL_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT_KHR = 0x00000020,
		GL_SUBGROUP_FEATURE_CLUSTERED_BIT_KHR = 0x00000040,
		GL_SUBGROUP_FEATURE_QUAD_BIT_KHR = 0x00000080,
		GL_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 0x00000100,
	};


	enum TextureStorageMaskAMD {
		GL_TEXTURE_STORAGE_SPARSE_BIT_AMD = 0x00000001,
	};


	enum FragmentShaderDestMaskATI {
		GL_RED_BIT_ATI = 0x00000001,
		GL_GREEN_BIT_ATI = 0x00000002,
		GL_BLUE_BIT_ATI = 0x00000004,
	};


	enum FragmentShaderDestModMaskATI {
		GL_2X_BIT_ATI = 0x00000001,
		GL_4X_BIT_ATI = 0x00000002,
		GL_8X_BIT_ATI = 0x00000004,
		GL_HALF_BIT_ATI = 0x00000008,
		GL_QUARTER_BIT_ATI = 0x00000010,
		GL_EIGHTH_BIT_ATI = 0x00000020,
		GL_SATURATE_BIT_ATI = 0x00000040,
	};


	enum FragmentShaderColorModMaskATI {
		GL_COMP_BIT_ATI = 0x00000002,
		GL_NEGATE_BIT_ATI = 0x00000004,
		GL_BIAS_BIT_ATI = 0x00000008,
	};


	enum TraceMaskMESA {
		GL_TRACE_OPERATIONS_BIT_MESA = 0x0001,
		GL_TRACE_PRIMITIVES_BIT_MESA = 0x0002,
		GL_TRACE_ARRAYS_BIT_MESA = 0x0004,
		GL_TRACE_TEXTURES_BIT_MESA = 0x0008,
		GL_TRACE_PIXELS_BIT_MESA = 0x0010,
		GL_TRACE_ERRORS_BIT_MESA = 0x0020,
		GL_TRACE_ALL_BITS_MESA = 0xFFFF,
	};


	enum PathRenderingMaskNV {
		GL_BOLD_BIT_NV = 0x01,
		GL_ITALIC_BIT_NV = 0x02,
		GL_GLYPH_WIDTH_BIT_NV = 0x01,
		GL_GLYPH_HEIGHT_BIT_NV = 0x02,
		GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV = 0x04,
		GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV = 0x08,
		GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV = 0x10,
		GL_GLYPH_VERTICAL_BEARING_X_BIT_NV = 0x20,
		GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV = 0x40,
		GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV = 0x80,
		GL_GLYPH_HAS_KERNING_BIT_NV = 0x100,
		GL_FONT_X_MIN_BOUNDS_BIT_NV = 0x00010000,
		GL_FONT_Y_MIN_BOUNDS_BIT_NV = 0x00020000,
		GL_FONT_X_MAX_BOUNDS_BIT_NV = 0x00040000,
		GL_FONT_Y_MAX_BOUNDS_BIT_NV = 0x00080000,
		GL_FONT_UNITS_PER_EM_BIT_NV = 0x00100000,
		GL_FONT_ASCENDER_BIT_NV = 0x00200000,
		GL_FONT_DESCENDER_BIT_NV = 0x00400000,
		GL_FONT_HEIGHT_BIT_NV = 0x00800000,
		GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV = 0x01000000,
		GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV = 0x02000000,
		GL_FONT_UNDERLINE_POSITION_BIT_NV = 0x04000000,
		GL_FONT_UNDERLINE_THICKNESS_BIT_NV = 0x08000000,
		GL_FONT_HAS_KERNING_BIT_NV = 0x10000000,
		GL_FONT_NUM_GLYPH_INDICES_BIT_NV = 0x20000000,
	};


	enum PerformanceQueryCapsMaskINTEL {
		GL_PERFQUERY_SINGLE_CONTEXT_INTEL = 0x00000000,
		GL_PERFQUERY_GLOBAL_CONTEXT_INTEL = 0x00000001,
	};


	enum VertexHintsMaskPGI {
		GL_VERTEX23_BIT_PGI = 0x00000004,
		GL_VERTEX4_BIT_PGI = 0x00000008,
		GL_COLOR3_BIT_PGI = 0x00010000,
		GL_COLOR4_BIT_PGI = 0x00020000,
		GL_EDGEFLAG_BIT_PGI = 0x00040000,
		GL_INDEX_BIT_PGI = 0x00080000,
		GL_MAT_AMBIENT_BIT_PGI = 0x00100000,
		GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = 0x00200000,
		GL_MAT_DIFFUSE_BIT_PGI = 0x00400000,
		GL_MAT_EMISSION_BIT_PGI = 0x00800000,
		GL_MAT_COLOR_INDEXES_BIT_PGI = 0x01000000,
		GL_MAT_SHININESS_BIT_PGI = 0x02000000,
		GL_MAT_SPECULAR_BIT_PGI = 0x04000000,
		GL_NORMAL_BIT_PGI = 0x08000000,
		GL_TEXCOORD1_BIT_PGI = 0x10000000,
		GL_TEXCOORD2_BIT_PGI = 0x20000000,
		GL_TEXCOORD3_BIT_PGI = 0x40000000,
		GL_TEXCOORD4_BIT_PGI = 0x80000000,
	};


	enum BufferBitQCOM {
		GL_COLOR_BUFFER_BIT0_QCOM = 0x00000001,
		GL_COLOR_BUFFER_BIT1_QCOM = 0x00000002,
		GL_COLOR_BUFFER_BIT2_QCOM = 0x00000004,
		GL_COLOR_BUFFER_BIT3_QCOM = 0x00000008,
		GL_COLOR_BUFFER_BIT4_QCOM = 0x00000010,
		GL_COLOR_BUFFER_BIT5_QCOM = 0x00000020,
		GL_COLOR_BUFFER_BIT6_QCOM = 0x00000040,
		GL_COLOR_BUFFER_BIT7_QCOM = 0x00000080,
		GL_DEPTH_BUFFER_BIT0_QCOM = 0x00000100,
		GL_DEPTH_BUFFER_BIT1_QCOM = 0x00000200,
		GL_DEPTH_BUFFER_BIT2_QCOM = 0x00000400,
		GL_DEPTH_BUFFER_BIT3_QCOM = 0x00000800,
		GL_DEPTH_BUFFER_BIT4_QCOM = 0x00001000,
		GL_DEPTH_BUFFER_BIT5_QCOM = 0x00002000,
		GL_DEPTH_BUFFER_BIT6_QCOM = 0x00004000,
		GL_DEPTH_BUFFER_BIT7_QCOM = 0x00008000,
		GL_STENCIL_BUFFER_BIT0_QCOM = 0x00010000,
		GL_STENCIL_BUFFER_BIT1_QCOM = 0x00020000,
		GL_STENCIL_BUFFER_BIT2_QCOM = 0x00040000,
		GL_STENCIL_BUFFER_BIT3_QCOM = 0x00080000,
		GL_STENCIL_BUFFER_BIT4_QCOM = 0x00100000,
		GL_STENCIL_BUFFER_BIT5_QCOM = 0x00200000,
		GL_STENCIL_BUFFER_BIT6_QCOM = 0x00400000,
		GL_STENCIL_BUFFER_BIT7_QCOM = 0x00800000,
		GL_MULTISAMPLE_BUFFER_BIT0_QCOM = 0x01000000,
		GL_MULTISAMPLE_BUFFER_BIT1_QCOM = 0x02000000,
		GL_MULTISAMPLE_BUFFER_BIT2_QCOM = 0x04000000,
		GL_MULTISAMPLE_BUFFER_BIT3_QCOM = 0x08000000,
		GL_MULTISAMPLE_BUFFER_BIT4_QCOM = 0x10000000,
		GL_MULTISAMPLE_BUFFER_BIT5_QCOM = 0x20000000,
		GL_MULTISAMPLE_BUFFER_BIT6_QCOM = 0x40000000,
		GL_MULTISAMPLE_BUFFER_BIT7_QCOM = 0x80000000,
	};


	enum FoveationConfigBitQCOM {
		GL_FOVEATION_ENABLE_BIT_QCOM = 0x00000001,
		GL_FOVEATION_SCALED_BIN_METHOD_BIT_QCOM = 0x00000002,
		GL_FOVEATION_SUBSAMPLED_LAYOUT_METHOD_BIT_QCOM = 0x00000004,
	};


	enum FfdMaskSGIX {
		GL_TEXTURE_DEFORMATION_BIT_SGIX = 0x00000001,
		GL_GEOMETRY_DEFORMATION_BIT_SGIX = 0x00000002,
	};


	enum CommandOpcodesNV {
		GL_TERMINATE_SEQUENCE_COMMAND_NV = 0x0000,
		GL_NOP_COMMAND_NV = 0x0001,
		GL_DRAW_ELEMENTS_COMMAND_NV = 0x0002,
		GL_DRAW_ARRAYS_COMMAND_NV = 0x0003,
		GL_DRAW_ELEMENTS_STRIP_COMMAND_NV = 0x0004,
		GL_DRAW_ARRAYS_STRIP_COMMAND_NV = 0x0005,
		GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV = 0x0006,
		GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV = 0x0007,
		GL_ELEMENT_ADDRESS_COMMAND_NV = 0x0008,
		GL_ATTRIBUTE_ADDRESS_COMMAND_NV = 0x0009,
		GL_UNIFORM_ADDRESS_COMMAND_NV = 0x000A,
		GL_BLEND_COLOR_COMMAND_NV = 0x000B,
		GL_STENCIL_REF_COMMAND_NV = 0x000C,
		GL_LINE_WIDTH_COMMAND_NV = 0x000D,
		GL_POLYGON_OFFSET_COMMAND_NV = 0x000E,
		GL_ALPHA_REF_COMMAND_NV = 0x000F,
		GL_VIEWPORT_COMMAND_NV = 0x0010,
		GL_SCISSOR_COMMAND_NV = 0x0011,
		GL_FRONT_FACE_COMMAND_NV = 0x0012,
	};


	enum MapTextureFormatINTEL {
		GL_LAYOUT_DEFAULT_INTEL = 0,
		GL_LAYOUT_LINEAR_INTEL = 1,
		GL_LAYOUT_LINEAR_CPU_CACHED_INTEL = 2,
	};


	enum PathRenderingTokenNV {
		GL_CLOSE_PATH_NV = 0x00,
		GL_MOVE_TO_NV = 0x02,
		GL_RELATIVE_MOVE_TO_NV = 0x03,
		GL_LINE_TO_NV = 0x04,
		GL_RELATIVE_LINE_TO_NV = 0x05,
		GL_HORIZONTAL_LINE_TO_NV = 0x06,
		GL_RELATIVE_HORIZONTAL_LINE_TO_NV = 0x07,
		GL_VERTICAL_LINE_TO_NV = 0x08,
		GL_RELATIVE_VERTICAL_LINE_TO_NV = 0x09,
		GL_QUADRATIC_CURVE_TO_NV = 0x0A,
		GL_RELATIVE_QUADRATIC_CURVE_TO_NV = 0x0B,
		GL_CUBIC_CURVE_TO_NV = 0x0C,
		GL_RELATIVE_CUBIC_CURVE_TO_NV = 0x0D,
		GL_SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0E,
		GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0F,
		GL_SMOOTH_CUBIC_CURVE_TO_NV = 0x10,
		GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV = 0x11,
		GL_SMALL_CCW_ARC_TO_NV = 0x12,
		GL_RELATIVE_SMALL_CCW_ARC_TO_NV = 0x13,
		GL_SMALL_CW_ARC_TO_NV = 0x14,
		GL_RELATIVE_SMALL_CW_ARC_TO_NV = 0x15,
		GL_LARGE_CCW_ARC_TO_NV = 0x16,
		GL_RELATIVE_LARGE_CCW_ARC_TO_NV = 0x17,
		GL_LARGE_CW_ARC_TO_NV = 0x18,
		GL_RELATIVE_LARGE_CW_ARC_TO_NV = 0x19,
		GL_CONIC_CURVE_TO_NV = 0x1A,
		GL_RELATIVE_CONIC_CURVE_TO_NV = 0x1B,
		GL_SHARED_EDGE_NV = 0xC0,
		GL_ROUNDED_RECT_NV = 0xE8,
		GL_RELATIVE_ROUNDED_RECT_NV = 0xE9,
		GL_ROUNDED_RECT2_NV = 0xEA,
		GL_RELATIVE_ROUNDED_RECT2_NV = 0xEB,
		GL_ROUNDED_RECT4_NV = 0xEC,
		GL_RELATIVE_ROUNDED_RECT4_NV = 0xED,
		GL_ROUNDED_RECT8_NV = 0xEE,
		GL_RELATIVE_ROUNDED_RECT8_NV = 0xEF,
		GL_RESTART_PATH_NV = 0xF0,
		GL_DUP_FIRST_CUBIC_CURVE_TO_NV = 0xF2,
		GL_DUP_LAST_CUBIC_CURVE_TO_NV = 0xF4,
		GL_RECT_NV = 0xF6,
		GL_RELATIVE_RECT_NV = 0xF7,
		GL_CIRCULAR_CCW_ARC_TO_NV = 0xF8,
		GL_CIRCULAR_CW_ARC_TO_NV = 0xFA,
		GL_CIRCULAR_TANGENT_ARC_TO_NV = 0xFC,
		GL_ARC_TO_NV = 0xFE,
		GL_RELATIVE_ARC_TO_NV = 0xFF,
	};


	enum TransformFeedbackTokenNV {
		GL_NEXT_BUFFER_NV = -2,
		GL_SKIP_COMPONENTS4_NV = -3,
		GL_SKIP_COMPONENTS3_NV = -4,
		GL_SKIP_COMPONENTS2_NV = -5,
		GL_SKIP_COMPONENTS1_NV = -6,
	};


	enum TriangleListSUN {
		GL_RESTART_SUN = 0x0001,
		GL_REPLACE_MIDDLE_SUN = 0x0002,
		GL_REPLACE_OLDEST_SUN = 0x0003,
	};


	enum SpecialNumbers {
		GL_FALSE = 0,
		GL_NO_ERROR = 0,
		GL_ZERO = 0,
		GL_NONE = 0,
		GL_NONE_OES = 0,
		GL_TRUE = 1,
		GL_ONE = 1,
		GL_INVALID_INDEX = 0xFFFFFFFF,
		GL_ALL_PIXELS_AMD = 0xFFFFFFFF,
		GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFF,
		GL_TIMEOUT_IGNORED_APPLE = 0xFFFFFFFFFFFFFFFF,
		GL_VERSION_ES_CL_1_0 = 1,
		GL_VERSION_ES_CM_1_1 = 1,
		GL_VERSION_ES_CL_1_1 = 1,
		GL_UUID_SIZE_EXT = 16,
		GL_LUID_SIZE_EXT = 8,
	};


	enum RegisterCombinerPname {
		GL_COMBINE = 0x8570,
		GL_COMBINE_ARB = 0x8570,
		GL_COMBINE_EXT = 0x8570,
		GL_COMBINE_RGB = 0x8571,
		GL_COMBINE_RGB_ARB = 0x8571,
		GL_COMBINE_RGB_EXT = 0x8571,
		GL_COMBINE_ALPHA = 0x8572,
		GL_COMBINE_ALPHA_ARB = 0x8572,
		GL_COMBINE_ALPHA_EXT = 0x8572,
		GL_RGB_SCALE = 0x8573,
		GL_RGB_SCALE_ARB = 0x8573,
		GL_RGB_SCALE_EXT = 0x8573,
		GL_ADD_SIGNED = 0x8574,
		GL_ADD_SIGNED_ARB = 0x8574,
		GL_ADD_SIGNED_EXT = 0x8574,
		GL_INTERPOLATE = 0x8575,
		GL_INTERPOLATE_ARB = 0x8575,
		GL_INTERPOLATE_EXT = 0x8575,
		GL_CONSTANT = 0x8576,
		GL_CONSTANT_ARB = 0x8576,
		GL_CONSTANT_EXT = 0x8576,
		GL_CONSTANT_NV = 0x8576,
		GL_PRIMARY_COLOR = 0x8577,
		GL_PRIMARY_COLOR_ARB = 0x8577,
		GL_PRIMARY_COLOR_EXT = 0x8577,
		GL_PREVIOUS = 0x8578,
		GL_PREVIOUS_ARB = 0x8578,
		GL_PREVIOUS_EXT = 0x8578,
		GL_SOURCE0_RGB = 0x8580,
		GL_SOURCE0_RGB_ARB = 0x8580,
		GL_SOURCE0_RGB_EXT = 0x8580,
		GL_SRC0_RGB = 0x8580,
		GL_SOURCE1_RGB = 0x8581,
		GL_SOURCE1_RGB_ARB = 0x8581,
		GL_SOURCE1_RGB_EXT = 0x8581,
		GL_SRC1_RGB = 0x8581,
		GL_SOURCE2_RGB = 0x8582,
		GL_SOURCE2_RGB_ARB = 0x8582,
		GL_SOURCE2_RGB_EXT = 0x8582,
		GL_SRC2_RGB = 0x8582,
		GL_SOURCE3_RGB_NV = 0x8583,
		GL_SOURCE0_ALPHA = 0x8588,
		GL_SOURCE0_ALPHA_ARB = 0x8588,
		GL_SOURCE0_ALPHA_EXT = 0x8588,
		GL_SRC0_ALPHA = 0x8588,
		GL_SOURCE1_ALPHA = 0x8589,
		GL_SOURCE1_ALPHA_ARB = 0x8589,
		GL_SOURCE1_ALPHA_EXT = 0x8589,
		GL_SRC1_ALPHA = 0x8589,
		GL_SRC1_ALPHA_EXT = 0x8589,
		GL_SOURCE2_ALPHA = 0x858A,
		GL_SOURCE2_ALPHA_ARB = 0x858A,
		GL_SOURCE2_ALPHA_EXT = 0x858A,
		GL_SRC2_ALPHA = 0x858A,
		GL_SOURCE3_ALPHA_NV = 0x858B,
		GL_OPERAND0_RGB = 0x8590,
		GL_OPERAND0_RGB_ARB = 0x8590,
		GL_OPERAND0_RGB_EXT = 0x8590,
		GL_OPERAND1_RGB = 0x8591,
		GL_OPERAND1_RGB_ARB = 0x8591,
		GL_OPERAND1_RGB_EXT = 0x8591,
		GL_OPERAND2_RGB = 0x8592,
		GL_OPERAND2_RGB_ARB = 0x8592,
		GL_OPERAND2_RGB_EXT = 0x8592,
		GL_OPERAND3_RGB_NV = 0x8593,
		GL_OPERAND0_ALPHA = 0x8598,
		GL_OPERAND0_ALPHA_ARB = 0x8598,
		GL_OPERAND0_ALPHA_EXT = 0x8598,
		GL_OPERAND1_ALPHA = 0x8599,
		GL_OPERAND1_ALPHA_ARB = 0x8599,
		GL_OPERAND1_ALPHA_EXT = 0x8599,
		GL_OPERAND2_ALPHA = 0x859A,
		GL_OPERAND2_ALPHA_ARB = 0x859A,
		GL_OPERAND2_ALPHA_EXT = 0x859A,
		GL_OPERAND3_ALPHA_NV = 0x859B,
	};


	enum ShaderType {
		GL_FRAGMENT_SHADER = 0x8B30,
		GL_FRAGMENT_SHADER_ARB = 0x8B30,
		GL_VERTEX_SHADER = 0x8B31,
		GL_VERTEX_SHADER_ARB = 0x8B31,
	};


	enum ContainerType {
		GL_PROGRAM_OBJECT_ARB = 0x8B40,
		GL_PROGRAM_OBJECT_EXT = 0x8B40,
	};


	enum AttributeType {
		GL_FLOAT_VEC2 = 0x8B50,
		GL_FLOAT_VEC2_ARB = 0x8B50,
		GL_FLOAT_VEC3 = 0x8B51,
		GL_FLOAT_VEC3_ARB = 0x8B51,
		GL_FLOAT_VEC4 = 0x8B52,
		GL_FLOAT_VEC4_ARB = 0x8B52,
		GL_INT_VEC2 = 0x8B53,
		GL_INT_VEC2_ARB = 0x8B53,
		GL_INT_VEC3 = 0x8B54,
		GL_INT_VEC3_ARB = 0x8B54,
		GL_INT_VEC4 = 0x8B55,
		GL_INT_VEC4_ARB = 0x8B55,
		GL_BOOL = 0x8B56,
		GL_BOOL_ARB = 0x8B56,
		GL_BOOL_VEC2 = 0x8B57,
		GL_BOOL_VEC2_ARB = 0x8B57,
		GL_BOOL_VEC3 = 0x8B58,
		GL_BOOL_VEC3_ARB = 0x8B58,
		GL_BOOL_VEC4 = 0x8B59,
		GL_BOOL_VEC4_ARB = 0x8B59,
		GL_FLOAT_MAT2 = 0x8B5A,
		GL_FLOAT_MAT2_ARB = 0x8B5A,
		GL_FLOAT_MAT3 = 0x8B5B,
		GL_FLOAT_MAT3_ARB = 0x8B5B,
		GL_FLOAT_MAT4 = 0x8B5C,
		GL_FLOAT_MAT4_ARB = 0x8B5C,
		GL_SAMPLER_1D = 0x8B5D,
		GL_SAMPLER_1D_ARB = 0x8B5D,
		GL_SAMPLER_2D = 0x8B5E,
		GL_SAMPLER_2D_ARB = 0x8B5E,
		GL_SAMPLER_3D = 0x8B5F,
		GL_SAMPLER_3D_ARB = 0x8B5F,
		GL_SAMPLER_3D_OES = 0x8B5F,
		GL_SAMPLER_CUBE = 0x8B60,
		GL_SAMPLER_CUBE_ARB = 0x8B60,
		GL_SAMPLER_1D_SHADOW = 0x8B61,
		GL_SAMPLER_1D_SHADOW_ARB = 0x8B61,
		GL_SAMPLER_2D_SHADOW = 0x8B62,
		GL_SAMPLER_2D_SHADOW_ARB = 0x8B62,
		GL_SAMPLER_2D_SHADOW_EXT = 0x8B62,
		GL_SAMPLER_2D_RECT = 0x8B63,
		GL_SAMPLER_2D_RECT_ARB = 0x8B63,
		GL_SAMPLER_2D_RECT_SHADOW = 0x8B64,
		GL_SAMPLER_2D_RECT_SHADOW_ARB = 0x8B64,
		GL_FLOAT_MAT2x3 = 0x8B65,
		GL_FLOAT_MAT2x3_NV = 0x8B65,
		GL_FLOAT_MAT2x4 = 0x8B66,
		GL_FLOAT_MAT2x4_NV = 0x8B66,
		GL_FLOAT_MAT3x2 = 0x8B67,
		GL_FLOAT_MAT3x2_NV = 0x8B67,
		GL_FLOAT_MAT3x4 = 0x8B68,
		GL_FLOAT_MAT3x4_NV = 0x8B68,
		GL_FLOAT_MAT4x2 = 0x8B69,
		GL_FLOAT_MAT4x2_NV = 0x8B69,
		GL_FLOAT_MAT4x3 = 0x8B6A,
		GL_FLOAT_MAT4x3_NV = 0x8B6A,
	};

	typedef GLvoid _glBindBuffer(GLuint Target, GLuint Buffer);
	typedef GLvoid _glBindVertexArray(GLuint Array);
	typedef GLvoid _glBufferData(GLuint Target, GLsizeiptr size, const void* DataAdressess, GLuint usage);
	typedef GLvoid _glClear(GLbitfield Mask);
	typedef GLvoid _glDeleteBuffers(GLsizei Size, const GLuint* Buffer);
	typedef GLvoid _glDeleteVertexArrays(GLsizei Size, const GLuint* Arrays);
	typedef GLvoid _glDrawArrays(GLuint Mode, GLint Index, GLsizei Count);
	typedef GLvoid _glEnableVertexAttribArray(GLuint);
	typedef GLvoid _glGenBuffers(GLsizei Number, GLuint* Buffers);
	typedef GLvoid _glGenVertexArrays(GLsizei Number, GLuint* Arrays);
	typedef GLint  _glGetUniformLocation(GLuint Program, const GLchar** UnformName);
	typedef GLvoid _glUniformMatrix4fv(GLint Location, GLsizei Count, GLboolean IsTranspose, const GLfloat* Value);
	typedef GLvoid _glUseProgram(GLuint Program);
	typedef GLvoid _glVertexAttribPointer(GLuint Index, GLint Size, GLuint Type, GLboolean IsNormalized, GLsizei Stride, const void* Pointer);
	typedef GLvoid _glClearColor(GLfloat Red, GLfloat Green, GLfloat Blue, GLfloat Alpha);
	typedef GLvoid _glDepthFunc(GLint Function);
	typedef GLvoid _glEnable(GLint Cap);
	typedef GLvoid _glViewport(GLint X, GLint Y, GLsizei Width, GLsizei Height);
	typedef GLvoid _glAttachShader(GLuint Program, GLuint Shader);
	typedef GLvoid _glCompileShader(GLuint Shader);
	typedef GLuint _glCreateProgram();
	typedef GLuint _glCreateShader(enum ShaderType);
	typedef GLvoid _glDeleteShader(GLuint Shader);
	typedef GLvoid _glDetachShader(GLuint Program, GLuint Shader);
	typedef GLvoid _glGetProgramInfoLog(GLuint Program, GLsizei MaxLength, GLsizei* Length, GLchar* InfoLog);
	typedef GLvoid _glGetProgramiv(GLuint Program, enum ParameterName, GLint* Parameters);
	typedef GLvoid _glGetShaderInfoLog(GLuint Shader, GLsizei MaxLength, GLsizei* Length, GLchar* InfoLog);
	typedef GLvoid _glGetShaderiv(GLuint Shader, enum ParameterName, GLint* Parameters);
	typedef GLvoid _glLinkProgram(GLuint Program);
	typedef GLvoid _glShaderSource(GLuint Shader, GLsizei Count, const GLchar** String, const GLint* Length);

	_glBindBuffer* glBindBuffer;
	_glBindVertexArray* glBindVertexArray;
	_glBufferData* glBufferData;
	_glClear* glClear;
	_glDeleteBuffers* glDeleteBuffers;
	_glDeleteVertexArrays* glDeleteVertexArrays;
	_glDrawArrays* glDrawArrays;
	_glEnableVertexAttribArray* glEnableVertexAttribArray;
	_glGenBuffers* glGenBuffers;
	_glGenVertexArrays* glGenVertexArrays;
	_glGetUniformLocation* glGetUniformLocation;
	_glUniformMatrix4fv* glUniformMatrix4fv;
	_glUseProgram* glUseProgram;
	_glVertexAttribPointer* glVertexAttribPointer;
	_glClearColor* glClearColor;
	_glDepthFunc* glDepthFunc;
	_glEnable* glEnable;
	_glViewport* glViewport;
	_glAttachShader* glAttachShader;
	_glCompileShader* glCompileShader;
	_glCreateProgram* glCreateProgram;
	_glCreateShader* glCreateShader;
	_glDeleteShader* glDeleteShader;
	_glDetachShader* glDetachShader;
	_glGetProgramInfoLog* glGetProgramInfoLog;
	_glGetProgramiv* glGetProgramiv;
	_glGetShaderInfoLog* glGetShaderInfoLog;
	_glGetShaderiv* glGetShaderiv;
	_glLinkProgram* glLinkProgram;
	_glShaderSource* glShaderSource;

	class OpenGL {

	private:
		PIXELFORMATDESCRIPTOR pfd;
		Window::Window* ContextWindow;
		HMODULE mod;

		int InitOpenGL();


	public:
		OpenGL(Window::Window*);

		void DeleteContext();
		void ResizeViewport(unsigned int Width, unsigned int Height);

	};

}

/*enum AttribMask {
	GL_CURRENT_BIT = 0x01,
	GL_POINT_BIT = 0x02,
	GL_LINE_BIT = 0x04,
	GL_POLYGON_BIT = 0x08,
	GL_POLYGON_STIPPLE_BIT = 0x010,
	GL_PIXEL_MODE_BIT = 0x020,
	GL_LIGHTING_BIT = 0x040,
	GL_FOG_BIT = 0x080,
	GL_DEPTH_BUFFER_BIT = 0x0100,
	GL_ACCUM_BUFFER_BIT = 0x0200,
	GL_STENCIL_BUFFER_BIT = 0x0400,
	GL_VIEWPORT_BIT = 0x0800,
	GL_TRANSFORM_BIT = 0x01000,
	GL_ENABLE_BIT = 0x02000,
	GL_COLOR_BUFFER_BIT = 0x04000,
	GL_HINT_BIT = 0x08000,
	GL_EVAL_BIT = 0x010000,
	GL_LIST_BIT = 0x020000,
	GL_TEXTURE_BIT = 0x040000,
	GL_SCISSOR_BIT = 0x080000,
	GL_MULTISAMPLE_BIT = 0x20000000,
	GL_MULTISAMPLE_BIT_ARB = 0x20000000,
	GL_MULTISAMPLE_BIT_EXT = 0x20000000,
	GL_MULTISAMPLE_BIT_3DFX = 0x20000000,
	GL_ALL_ATTRIB_BITS = 0xFFFFFFFF
};

enum SpecialNumbers {
	GL_FALSE = 0,
	GL_NO_ERROR = 0,
	GL_ZERO = 0,
	GL_NONE = 0,
	GL_NONE_OES = 0,
	GL_TRUE = 1,
	GL_ONE = 1,
	GL_INVALID_INDEX = 0xFFFFFFFF,
	GL_ALL_PIXELS_AMD = 0xFFFFFFFF,
	GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFF,
	GL_TIMEOUT_IGNORED_APPLE = 0xFFFFFFFFFFFFFFFF,
	GL_VERSION_ES_CL_1_0 = 1,
	GL_VERSION_ES_CM_1_1 = 1,
	GL_VERSION_ES_CL_1_1 = 1,
	GL_UUID_SIZE_EXT = 16,
	GL_LUID_SIZE_EXT = 8,
};

*/